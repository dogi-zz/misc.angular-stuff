{"version":3,"file":"misc.angular-stuff.mjs","sources":["../../src/app/tools/svg-path-tools.ts","../../src/app/info-panel/info-panel.component.ts","../../src/app/info-panel/info-panel.module.ts","../../src/app/split-bar/split-bar.component.ts","../../src/app/split-bar/split-bar.module.ts","../../src/app/bar-and-panel-showcase/bar-and-panel-showcase.component.ts","../../src/app/bar-and-panel-showcase/bar-and-panel-showcase.component.html","../../src/app/bar-and-panel-showcase/bar-and-panel-showcase.module.ts","../../misc.angular-stuff.ts"],"sourcesContent":["export interface SvgPathCurvedSegment extends SvgPathLineSegment {\n  cpFrom: [number, number];\n  cpTo: [number, number];\n}\n\nexport interface SvgPathLineSegment {\n  from: [number, number];\n  to: [number, number];\n  length?: number;\n  positionFromOriginal?: [number, number];\n}\n\nexport interface SvgPath {\n  segments: SvgPathSegmentImpl<any>[];\n}\n\n\nexport const getPontDistance = (from: [number, number], to: [number, number]): number => {\n  const [fx, fy] = from;\n  const [tx, ty] = to;\n  const [dx, dy] = [tx - fx, ty - fy];\n  return Math.sqrt((dx * dx) + (dy * dy));\n};\n\nconst getNormed = (from: [number, number], to: [number, number]): [number, number] => {\n  const [fx, fy] = from;\n  const [tx, ty] = to;\n  const d = getPontDistance(from, to);\n  return [(tx - fx) / d, (ty - fy) / d];\n};\n\nconst vectorAdd = (v1: [number, number], v2: [number, number]): [number, number] => {\n  return [v1[0] + v2[0], v1[1] + v2[1]];\n};\nconst scalarProd = (v1: [number, number], factor: number): [number, number] => {\n  return [v1[0] * factor, v1[1] * factor];\n};\n\nconst avg = (x1: number, x2: number) => (x1 + x2) / 2;\nconst round10 = (num: number) => Math.round(num * 10000000000) / 10000000000;\n\nconst getInnerAngle = (center: [number, number], start: [number, number], end: [number, number]) => {\n  const radius = getPontDistance(center, start);\n  const baseDirection = getNormed(center, start);\n  const pointOnBase = intersectLines(center, baseDirection, end, [baseDirection[1], -baseDirection[0]]);\n  const lenFromStartToPointOnBase = getPontDistance(start, pointOnBase);\n  const angle = Math.acos((radius - lenFromStartToPointOnBase) / radius);\n  return {angle, radius};\n};\n\nconst intersectLines = (P: [number, number], r: [number, number], Q: [number, number], s: [number, number]): [number, number] => {\n  const PQx = Q[0] - P[0];\n  const PQy = Q[1] - P[1];\n  const rx = r[0];\n  const ry = r[1];\n  const rxt = -ry;\n  const ryt = rx;\n  const qx = PQx * rx + PQy * ry;\n  const qy = PQx * rxt + PQy * ryt;\n  const sx = s[0] * rx + s[1] * ry;\n  const sy = s[0] * rxt + s[1] * ryt;\n  // if lines are identical or do not cross...\n  if (sy === 0) {\n    return null;\n  }\n  const a = qx - qy * sx / sy;\n  return [P[0] + a * rx, P[1] + a * ry];\n};\n\n\nexport class SvgPathTools {\n\n\n  public static svgPath(path: SvgPath): string {\n    const startSegment: SvgPathSegmentImpl<any> = path.segments[0];\n    const [fx, fy] = (startSegment as any).from;\n    let pathString = `M ${fx} ${fy}`;\n    path.segments.forEach(segment => {\n      pathString = `${pathString} ${SvgPathSegmentImpl.from(segment).svgContinuePathSegment()}`;\n    });\n    return pathString;\n  }\n\n  public static getPointOnLine(from: [number, number], to: [number, number], position: number): [number, number] {\n    const vector = [to[0] - from[0], to[1] - from[1]];\n    return [from[0] + vector[0] * position, from[1] + vector[1] * position];\n  }\n\n\n  public static getDirectionVector(segment: SvgPathCurvedSegment | SvgPathLineSegment, position: number): { point: [number, number], direction: [number, number], normal1: [number, number], normal2: [number, number] } {\n    if ((segment as SvgPathCurvedSegment).cpFrom) {\n      const curve = segment as SvgPathCurvedSegment;\n      const level1p1 = SvgPathTools.getPointOnLine(curve.from, curve.cpFrom, position);\n      const level1p2 = SvgPathTools.getPointOnLine(curve.cpFrom, curve.cpTo, position);\n      const level1p3 = SvgPathTools.getPointOnLine(curve.cpTo, curve.to, position);\n\n      const level2p1 = SvgPathTools.getPointOnLine(level1p1, level1p2, position);\n      const level2p2 = SvgPathTools.getPointOnLine(level1p2, level1p3, position);\n\n      const level3p1 = SvgPathTools.getPointOnLine(level2p1, level2p2, position);\n\n      const direction = getNormed(level2p1, level2p2);\n      return {\n        point: level3p1,\n        direction,\n        normal1: [direction[1], -direction[0]],\n        normal2: [-direction[1], direction[0]],\n      };\n    } else {\n      const point = SvgPathTools.getPointOnLine(segment.from, segment.to, position);\n      const direction = getNormed(segment.from, segment.to);\n      return {\n        point,\n        direction,\n        normal1: [direction[1], -direction[0]],\n        normal2: [-direction[1], direction[0]],\n      };\n    }\n\n  }\n\n\n  public static applyRoundCorner(segments: SvgPathSegmentImpl<any>[], segment1: SvgPathSegmentImpl<any>, segment2: SvgPathSegmentImpl<any>,\n                                 cornerModification: { round: SvgPathSegmentImpl<any>, cutPosition1: number, cutPosition2: number }) {\n\n    const idx1 = segments.indexOf(segment1);\n    const idx2 = segments.indexOf(segment2);\n    const split1 = segment1.splitPath(cornerModification.cutPosition1);\n    const split2 = segment2.splitPath(cornerModification.cutPosition2);\n    segments[idx1] = split1[0];\n    segments[idx2] = split2[1];\n    segments.splice(idx2, 0, cornerModification.round);\n  }\n\n  public static getRoundCorner(segment1: SvgPathSegmentImpl<any>, segment2: SvgPathSegmentImpl<any>, desiredBorderRadius: number) {\n    const borderRadius = Math.min(\n      desiredBorderRadius,\n      getPontDistance((segment1 as any as SvgPathLineSegment).from, (segment1 as any as SvgPathLineSegment).to) / 2,\n      getPontDistance((segment2 as any as SvgPathLineSegment).from, (segment2 as any as SvgPathLineSegment).to) / 2,\n    );\n\n\n    const curveSegments1 = segment1.splitIntoSegmentsAround(1, borderRadius * 2, 2, 1);\n    const segmentToCut1 = curveSegments1.findFromCenter((s, l) => l >= borderRadius, -1);\n    const cutPosition1 = segmentToCut1.positionFromOriginal[0];\n    const direction1 = SvgPathTools.getDirectionVector(segmentToCut1, cutPosition1);\n\n    const curveSegments2 = segment2.splitIntoSegmentsAround(0, borderRadius * 2, 2, 1);\n    const segmentToCut2 = curveSegments2.findFromCenter((s, l) => l >= borderRadius, 1);\n    const cutPosition2 = segmentToCut2.positionFromOriginal[1];\n    const direction2 = SvgPathTools.getDirectionVector(segmentToCut2, cutPosition2);\n\n    const circleCenter = intersectLines(direction1.point, direction1.normal1, direction2.point, direction2.normal1);\n\n\n    const {angle, radius} = getInnerAngle(circleCenter, direction1.point, direction2.point);\n    const circleParts = Math.PI * 2 / angle;\n    const circleControlPointDistance = 4 / 3 * Math.tan(Math.PI / (circleParts * 2)) * radius;\n\n    const round = SvgPathSegmentImpl.from({\n      from: direction1.point,\n      cpFrom: vectorAdd(direction1.point, scalarProd(direction1.direction, circleControlPointDistance)),//  [direction1.point[0] + direction1.direction[0] * circleControlPointDistance, direction1.point[1] + direction1.direction[1] * circleControlPointDistance],\n      cpTo: vectorAdd(direction2.point, scalarProd(direction2.direction, -circleControlPointDistance)),// [direction2.point[0] - direction2.direction[0] * circleControlPointDistance, direction2.point[1] - direction2.direction[1] * circleControlPointDistance],\n      to: direction2.point,\n    });\n\n    return {direction1, direction2, circleCenter, round, cutPosition1, cutPosition2};\n  }\n\n  public static getRingPart(angle: number, center: [number, number], outerRadius: number, innerRadius: number, borderRadius: number): { segments: SvgPathSegmentImpl<any>[], anchorPoints: [number, number][] } {\n    const segments: SvgPathSegmentImpl<any> [] = [];\n    const anchorPoints: [number, number][] = [];\n\n    const innerCircumference = Math.PI * 2 * innerRadius;\n    const borderAngle = borderRadius / innerCircumference * Math.PI * 2;\n\n    type Segment = { start: [number, number], end: [number, number], startTangent: [number, number], endTangent: [number, number], tangentLen: number };\n    const outerSegments: Segment[] = [];\n\n    const getPointPair = (ang: number, tangentDirection: number): [[number, number], [number, number]] => [[round10(Math.cos(ang)), round10(Math.sin(ang))], [round10(Math.cos(ang + tangentDirection * Math.PI / 2)), round10(Math.sin(ang + tangentDirection * Math.PI / 2))]];\n    const getTangentLen = (ang) => {\n      const segmentCount = Math.PI * 2 / ang;\n      return 4 / 3 * Math.tan(Math.PI / (2 * segmentCount));\n    };\n\n    let actAngle = 0;\n    while (actAngle < angle - Math.PI / 2) {\n      let nextAngle = actAngle + Math.PI / 2;\n      if (nextAngle + borderAngle > angle) {\n        nextAngle -= Math.PI / 4;\n      }\n      const [start, startTangent] = getPointPair(actAngle, 1);\n      const [end, endTangent] = getPointPair(nextAngle, -1);\n      const tangentLen = getTangentLen(nextAngle - actAngle);\n      outerSegments.push({start, end, startTangent, endTangent, tangentLen});\n      actAngle = nextAngle;\n    }\n    if (actAngle < angle) {\n      const [start, startTangent] = getPointPair(actAngle, 1);\n      const [end, endTangent] = getPointPair(angle, -1);\n      const tangentLen = getTangentLen(angle - actAngle);\n      outerSegments.push({start, end, startTangent, endTangent, tangentLen});\n    }\n\n    segments.push(SvgPathSegmentImpl.from({\n      from: vectorAdd(scalarProd(outerSegments[0].start, avg(outerRadius, innerRadius)), center),\n      to: vectorAdd(scalarProd(outerSegments[0].start, outerRadius), center),\n    }));\n    for (let idx = 0; idx < outerSegments.length; idx++) {\n      const segment = outerSegments[idx];\n      segments.push(SvgPathSegmentImpl.from({\n        from: vectorAdd(scalarProd(segment.start, outerRadius), center),\n        cpFrom: vectorAdd(scalarProd(vectorAdd(segment.start, scalarProd(segment.startTangent, segment.tangentLen)), outerRadius), center),\n        cpTo: vectorAdd(scalarProd(vectorAdd(segment.end, scalarProd(segment.endTangent, segment.tangentLen)), outerRadius), center),\n        to: vectorAdd(scalarProd(segment.end, outerRadius), center),\n      }));\n\n      if (idx === 0) {\n        anchorPoints.push(vectorAdd(scalarProd(segment.start, outerRadius), center));\n      }\n      anchorPoints.push(vectorAdd(scalarProd(segment.end, outerRadius), center));\n    }\n    segments.push(SvgPathSegmentImpl.from({\n      from: vectorAdd(scalarProd(outerSegments[outerSegments.length - 1].end, outerRadius), center),\n      to: vectorAdd(scalarProd(outerSegments[outerSegments.length - 1].end, innerRadius), center),\n    }));\n    for (let idx = outerSegments.length - 1; idx >= 0; idx--) {\n      const segment = outerSegments[idx];\n      segments.push(SvgPathSegmentImpl.from({\n        from: vectorAdd(scalarProd(segment.end, innerRadius), center),\n        cpFrom: vectorAdd(scalarProd(vectorAdd(segment.end, scalarProd(segment.endTangent, segment.tangentLen)), innerRadius), center),\n        cpTo: vectorAdd(scalarProd(vectorAdd(segment.start, scalarProd(segment.startTangent, segment.tangentLen)), innerRadius), center),\n        to: vectorAdd(scalarProd(segment.start, innerRadius), center),\n      }));\n\n      if (idx === 0) {\n        anchorPoints.push(vectorAdd(scalarProd(segment.start, innerRadius), center));\n      }\n      anchorPoints.push(vectorAdd(scalarProd(segment.end, innerRadius), center));\n    }\n    segments.push(SvgPathSegmentImpl.from({\n      from: vectorAdd(scalarProd(outerSegments[0].start, innerRadius), center),\n      to: vectorAdd(scalarProd(outerSegments[0].start, avg(outerRadius, innerRadius)), center),\n    }));\n\n    [0, outerSegments.length + 1, outerSegments.length + 3, outerSegments.length * 2 + 4].forEach((idx) => {\n      const roundCornerResult = SvgPathTools.getRoundCorner(segments[idx], segments[idx + 1], borderRadius);\n      SvgPathTools.applyRoundCorner(segments, segments[idx], segments[idx + 1], roundCornerResult);\n    });\n\n    return {\n      segments, anchorPoints,\n    };\n  }\n\n}\n\nexport class SvgPathSegmentList<T extends SvgPathSegmentImpl<T>> {\n  public segments: T[];\n\n  constructor(public original: T, public center: number) {\n    this.segments = [];\n  }\n\n  public findFromCenter(predicate: (s: T, l: number) => boolean, direction: 1 | -1) {\n    const segments: (T & SvgPathLineSegment)[] = this.segments as any;\n    let actualPart = segments.find(s => s.positionFromOriginal[0] < this.center && s.positionFromOriginal[0] > this.center);\n    if (!actualPart) {\n      if (direction === -1) {\n        actualPart = segments.find(s => s.positionFromOriginal[1] === this.center);\n      } else {\n        actualPart = segments.find(s => s.positionFromOriginal[0] === this.center);\n      }\n    }\n    let len = 0;\n    let idx = this.segments.indexOf(actualPart);\n    while (actualPart) {\n      len += actualPart.length;\n      if (predicate(actualPart, len)) {\n        break;\n      }\n      idx += direction;\n      actualPart = segments[idx];\n    }\n    return actualPart;\n  }\n}\n\n\nexport abstract class SvgPathSegmentImpl<T extends SvgPathSegmentImpl<T>> {\n\n  public static from(definition): SvgPathSegmentImpl<any> {\n    if (definition instanceof SvgPathLineSegmentImpl) {\n      return definition;\n    }\n    if ((definition as SvgPathCurvedSegment).cpFrom) {\n      return SvgPathCurveSegmentImpl.from(definition);\n    } else {\n      return SvgPathLineSegmentImpl.from(definition);\n    }\n  }\n\n\n  public abstract svgContinuePathSegment(): string;\n\n  public abstract svgSinglePathSegment(): string;\n\n  public abstract getPointOnSegment(position: number);\n\n  public abstract splitPath(position: number): [T, T];\n\n  public abstract getSegmentLen(maxDistance?: number, maxDepth?: number);\n\n  public abstract splitIntoSegmentsAround(splitCenter: number, splitCenterOffset: number, maxLen: number, lenResolution: number): SvgPathSegmentList<T>;\n\n}\n\nexport class SvgPathLineSegmentImpl extends SvgPathSegmentImpl<SvgPathLineSegmentImpl> implements SvgPathLineSegment {\n\n  public from: [number, number];\n  public to: [number, number];\n  public length?: number;\n  public positionFromOriginal?: [number, number];\n\n  private constructor(definition: SvgPathLineSegment) {\n    super();\n    Object.assign(this, definition);\n  }\n\n  public static override from(definition: SvgPathLineSegment): SvgPathLineSegmentImpl {\n    return definition instanceof SvgPathLineSegmentImpl ? definition : new SvgPathLineSegmentImpl(definition);\n  }\n\n  public override svgContinuePathSegment(): string {\n    const [fx, fy] = this.from;\n    const [tx, ty] = this.to;\n    return `L ${tx} ${ty}`;\n  }\n\n  public override svgSinglePathSegment(): string {\n    const [fx, fy] = this.from;\n    return `M ${fx} ${fy} ${this.svgContinuePathSegment()}`;\n  }\n\n  public override getPointOnSegment(position: number) {\n    return SvgPathTools.getPointOnLine(this.from, this.to, position);\n  }\n\n  public override splitPath(position: number): [SvgPathLineSegmentImpl, SvgPathLineSegmentImpl] {\n    const splitPoint = SvgPathTools.getPointOnLine(this.from, this.to, position);\n    const firstPath: SvgPathLineSegment = {\n      from: [...this.from],\n      to: [...splitPoint],\n    };\n    const secondPath: SvgPathLineSegment = {\n      from: [...splitPoint],\n      to: [...this.to],\n    };\n    return [SvgPathLineSegmentImpl.from(firstPath), SvgPathLineSegmentImpl.from(secondPath)];\n  }\n\n  public override getSegmentLen(maxDistance?: number, maxDepth?: number) {\n    return getPontDistance(this.from, this.to);\n  }\n\n  public override splitIntoSegmentsAround(splitCenter: number, splitCenterOffset: number, maxLen: number, lenResolution: number): SvgPathSegmentList<SvgPathLineSegmentImpl> {\n    const result = new SvgPathSegmentList<SvgPathLineSegmentImpl>(this, splitCenter);\n    const len = getPontDistance(this.from, this.to);\n    const parts = Math.ceil(len / maxLen);\n    const lenX = (this.to[0] - this.from[0]) / parts;\n    const lenY = (this.to[1] - this.from[1]) / parts;\n    for (let i = 0; i < parts; i++) {\n      result.segments.push(SvgPathLineSegmentImpl.from({\n        from: [this.from[0] + lenX * i, this.from[1] + lenY * i],\n        to: [this.from[0] + lenX * (i + 1), this.from[1] + lenY * (i + 1)],\n        positionFromOriginal: [i / parts, (i + 1) / parts],\n        length: len / parts,\n      }));\n    }\n    return result;\n  }\n}\n\nexport class SvgPathCurveSegmentImpl extends SvgPathSegmentImpl<SvgPathCurveSegmentImpl> implements SvgPathCurvedSegment {\n\n  public from: [number, number];\n  public to: [number, number];\n  public length?: number;\n  public positionFromOriginal?: [number, number];\n  public cpFrom: [number, number];\n  public cpTo: [number, number];\n\n  public calculatedPoints: {\n    position: number,\n    level1p1: [number, number],\n    level1p2: [number, number],\n    level1p3: [number, number],\n    level2p1: [number, number],\n    level2p2: [number, number],\n    level3p1: [number, number],\n  };\n\n  private constructor(definition: SvgPathCurvedSegment) {\n    super();\n    Object.assign(this, definition);\n  }\n\n  public clear() {\n    this.calculatedPoints = null;\n  }\n\n  public static override from(definition: SvgPathCurvedSegment): SvgPathCurveSegmentImpl {\n    return definition instanceof SvgPathCurveSegmentImpl ? definition : new SvgPathCurveSegmentImpl(definition);\n  }\n\n  public override svgContinuePathSegment(): string {\n    const [fx, fy] = this.from;\n    const [c1x, c1y] = this.cpFrom;\n    const [c2x, c2y] = this.cpTo;\n    const [tx, ty] = this.to;\n    return `C ${c1x} ${c1y} ${c2x} ${c2y} ${tx} ${ty}`;\n  }\n\n  public override svgSinglePathSegment(): string {\n    const [fx, fy] = this.from;\n    return `M ${fx} ${fy} ${this.svgContinuePathSegment()}`;\n  }\n\n  private calculatePointsForPosition(position: number) {\n    if (this.calculatedPoints?.position !== position) {\n      this.calculatedPoints = {position} as any;\n      this.calculatedPoints.level1p1 = SvgPathTools.getPointOnLine(this.from, this.cpFrom, position);\n      this.calculatedPoints.level1p2 = SvgPathTools.getPointOnLine(this.cpFrom, this.cpTo, position);\n      this.calculatedPoints.level1p3 = SvgPathTools.getPointOnLine(this.cpTo, this.to, position);\n\n      this.calculatedPoints.level2p1 = SvgPathTools.getPointOnLine(this.calculatedPoints.level1p1, this.calculatedPoints.level1p2, position);\n      this.calculatedPoints.level2p2 = SvgPathTools.getPointOnLine(this.calculatedPoints.level1p2, this.calculatedPoints.level1p3, position);\n\n      this.calculatedPoints.level3p1 = SvgPathTools.getPointOnLine(this.calculatedPoints.level2p1, this.calculatedPoints.level2p2, position);\n    }\n  }\n\n  public override getPointOnSegment(position: number) {\n    this.calculatePointsForPosition(position);\n    return this.calculatedPoints.level3p1;\n  }\n\n  public override splitPath(position: number): [SvgPathCurveSegmentImpl, SvgPathCurveSegmentImpl] {\n    this.calculatePointsForPosition(position);\n    const firstPath: SvgPathCurvedSegment = {\n      from: [...this.from],\n      cpFrom: [...this.calculatedPoints.level1p1],\n      cpTo: [...this.calculatedPoints.level2p1],\n      to: [...this.calculatedPoints.level3p1],\n    };\n    const secondPath: SvgPathCurvedSegment = {\n      from: [...this.calculatedPoints.level3p1],\n      cpFrom: [...this.calculatedPoints.level2p2],\n      cpTo: [...this.calculatedPoints.level1p3],\n      to: [...this.to],\n    };\n    return [SvgPathCurveSegmentImpl.from(firstPath), SvgPathCurveSegmentImpl.from(secondPath)];\n  }\n\n  public override getSegmentLen(maxDistance: number = 10, maxDepth: number = 100) {\n    if (typeof this.length === 'number') {\n      return this.length;\n    }\n    const d1 = getPontDistance(this.from, this.cpFrom);\n    const d2 = getPontDistance(this.to, this.cpTo);\n    const d3 = getPontDistance(this.from, this.to);\n    if (Math.max(d1, d2, d3) <= maxDistance || maxDepth <= 0) {\n      return getPontDistance(this.from, this.to);\n    }\n    const [subSegment1, subSegment2] = this.splitPath(0.5);\n    return subSegment1.getSegmentLen(maxDistance, maxDepth - 1)\n      + subSegment2.getSegmentLen(maxDistance, maxDepth - 1);\n  }\n\n  public override splitIntoSegmentsAround(splitCenter: number, splitCenterOffset: number, maxLen: number, lenResolution: number): SvgPathSegmentList<SvgPathCurveSegmentImpl> {\n    const result = new SvgPathSegmentList<SvgPathCurveSegmentImpl>(this, splitCenter);\n    result.segments.push(SvgPathCurveSegmentImpl.from({...this, positionFromOriginal: [0, 1]}));\n    const splitCenterPoint = (splitCenter ?? null) === null ? null : this.getPointOnSegment(splitCenter);\n    if (splitCenter && splitCenter < 1) {\n      const [s1, s2] = this.splitPath(splitCenter);\n      result.segments.splice(0, 1, SvgPathCurveSegmentImpl.from({...s1, positionFromOriginal: [0, splitCenter]}), SvgPathCurveSegmentImpl.from({...s2, positionFromOriginal: [splitCenter, 1]}));\n    }\n\n    const resultAroundSplitCenter = () => {\n      if (splitCenterPoint) {\n        return result.segments.filter(s => {\n          return (s.positionFromOriginal[0] <= splitCenter && s.positionFromOriginal[1] >= splitCenter)\n            || getPontDistance(s.from, splitCenterPoint) <= splitCenterOffset\n            || getPontDistance(s.to, splitCenterPoint) <= splitCenterOffset;\n        });\n      } else {\n        return result.segments;\n      }\n    };\n\n    let segmentToBig: SvgPathCurveSegmentImpl = resultAroundSplitCenter().find(s => getPontDistance(s.from, s.to) > maxLen);\n    while (segmentToBig) {\n      const [s1, s2] = segmentToBig.splitPath(0.5);\n      s1.positionFromOriginal = [segmentToBig.positionFromOriginal[0], avg(segmentToBig.positionFromOriginal[0], segmentToBig.positionFromOriginal[1])];\n      s2.positionFromOriginal = [avg(segmentToBig.positionFromOriginal[0], segmentToBig.positionFromOriginal[1]), segmentToBig.positionFromOriginal[1]];\n      result.segments.splice(result.segments.indexOf(segmentToBig), 1, s1, s2);\n      segmentToBig = resultAroundSplitCenter().find(s => getPontDistance(s.from, s.to) > maxLen);\n    }\n    result.segments.forEach(s => s.length = SvgPathCurveSegmentImpl.from(s).getSegmentLen(lenResolution, 10));\n    segmentToBig = resultAroundSplitCenter().find(s => s.length > maxLen);\n    while (segmentToBig) {\n      const [s1, s2] = segmentToBig.splitPath(0.5);\n      s1.positionFromOriginal = [segmentToBig.positionFromOriginal[0], avg(segmentToBig.positionFromOriginal[0], segmentToBig.positionFromOriginal[1])];\n      s2.positionFromOriginal = [avg(segmentToBig.positionFromOriginal[0], segmentToBig.positionFromOriginal[1]), segmentToBig.positionFromOriginal[1]];\n      s1.length = SvgPathCurveSegmentImpl.from(s1).getSegmentLen(lenResolution, 10);\n      s2.length = SvgPathCurveSegmentImpl.from(s2).getSegmentLen(lenResolution, 10);\n      result.segments.splice(result.segments.indexOf(segmentToBig), 1, s1, s2);\n      segmentToBig = resultAroundSplitCenter().find(s => getPontDistance(s.from, s.to) > maxLen);\n    }\n    return result;\n  }\n}\n\n","import {AfterViewInit, Component, ElementRef, Input, OnChanges, OnDestroy, OnInit, SimpleChanges, ViewChild} from '@angular/core';\n\ndeclare const ResizeObserver: any;\n\n@Component({\n  selector: 'info-panel',\n  template: `\n    <div class=\"info-panel\" #panel [ngStyle]=\"style\">\n      <ng-content></ng-content>\n    </div>`,\n  styles: [\n    `.info-panel {\n      box-shadow: rgba(0, 0, 0, 0.15) 1.95px 1.95px 2.6px;\n    }`,\n  ],\n})\nexport class InfoPanelComponent implements OnInit, OnChanges, AfterViewInit, OnDestroy {\n\n  @Input()\n  public container: HTMLElement;\n\n  @ViewChild('panel')\n  public panel: ElementRef<HTMLElement>;\n\n  @Input()\n  public margin: number = 0;\n\n  @Input()\n  public animate: number = 0;\n\n  @Input()\n  public anchor: 'top' | 'bottom' | 'left' | 'right';\n\n  @Input()\n  public direction: 'vertical' | 'horizontal';\n\n  @Input()\n  public sticky: boolean;\n\n  @Input()\n  public stickyVisible: boolean;\n\n  @Input()\n  public style: any;\n\n  @Input()\n  public fullSize: boolean;\n\n  @Input()\n  public fullMargin: number;\n\n\n  private actualPosition: 'top' | 'bottom' | 'left' | 'right';\n  private isInitialised = false;\n\n  private animationState: {\n    cloneElement: HTMLElement,\n    animationState: number,\n    targetTime: number,\n  } = null;\n  private animationTimeout = null;\n\n  constructor() {\n  }\n\n  public ngOnInit(): void {\n  }\n\n  public ngAfterViewInit() {\n    this.isInitialised = true;\n    this.initContainer();\n  }\n\n  public ngOnChanges(changes: SimpleChanges) {\n    if (changes.container) {\n      this.initContainer();\n    }\n    if (changes.stickyVisible && this.isInitialised) {\n      if (this.sticky) {\n        this.initAnimation(false);\n      }\n    }\n  }\n\n  public ngOnDestroy() {\n    this.stopAnimation();\n  }\n\n  private initContainer() {\n    if (this.container && this.panel?.nativeElement) {\n      this.container.style.position = 'relative';\n      this.container.style.overflow = 'hidden';\n\n      this.panel.nativeElement.style.position = 'absolute';\n      this.panel.nativeElement.style.display = 'inline-block';\n\n      this.panel.nativeElement.style.top = '';\n      this.panel.nativeElement.style.bottom = '';\n      this.panel.nativeElement.style.left = '';\n      this.panel.nativeElement.style.right = '';\n\n      if (!this.actualPosition) {\n        if (this.direction === 'horizontal') {\n          if (this.anchor === 'right') {\n            this.actualPosition = 'right';\n          } else {\n            this.actualPosition = 'left';\n          }\n        } else {\n          if (this.anchor === 'top') {\n            this.actualPosition = 'top';\n          } else {\n            this.actualPosition = 'bottom';\n          }\n        }\n      }\n      this.drawUpdate();\n\n      if (!this.sticky) {\n        this.container.addEventListener('mousemove', (event) => {\n          const gapPointTop = this.container.getBoundingClientRect().top + this.panel.nativeElement.getBoundingClientRect().height + this.margin * 2;\n          const gapPointBottom = this.container.getBoundingClientRect().bottom - this.panel.nativeElement.getBoundingClientRect().height - this.margin * 2;\n          const gapPointLeft = this.container.getBoundingClientRect().left + this.panel.nativeElement.getBoundingClientRect().width + this.margin * 2;\n          const gapPointRight = this.container.getBoundingClientRect().right - this.panel.nativeElement.getBoundingClientRect().width - this.margin * 2;\n\n          if (this.direction === 'horizontal') {\n            if (this.anchor === 'left') {\n              if (event.clientX < gapPointLeft) {\n                this.placeTo('right');\n              } else {\n                this.placeTo('left');\n              }\n            } else if (this.anchor === 'right') {\n              if (event.clientX > gapPointRight) {\n                this.placeTo('left');\n              } else {\n                this.placeTo('right');\n              }\n            } else {\n              if (this.actualPosition === 'left' && event.clientX < gapPointLeft) {\n                this.placeTo('right');\n              } else if (this.actualPosition === 'right' && event.clientX > gapPointRight) {\n                this.placeTo('left');\n              }\n            }\n          } else {\n            if (this.anchor === 'top') {\n              if (event.clientY < gapPointTop) {\n                this.placeTo('bottom');\n              } else {\n                this.placeTo('top');\n              }\n            } else if (this.anchor === 'bottom') {\n              if (event.clientY > gapPointBottom) {\n                this.placeTo('top');\n              } else {\n                this.placeTo('bottom');\n              }\n            } else {\n              if (this.actualPosition === 'top' && event.clientY < gapPointTop) {\n                this.placeTo('bottom');\n              } else if (this.actualPosition === 'bottom' && event.clientY > gapPointBottom) {\n                this.placeTo('top');\n              }\n            }\n          }\n        });\n\n        this.container.addEventListener('mouseleave', (event) => {\n          if (this.anchor) {\n            this.placeTo(this.anchor);\n          }\n        });\n\n      }\n\n      const resize = new ResizeObserver(() => {\n        this.checkPanelSize();\n      });\n      resize.observe(this.container);\n      resize.observe(this.panel.nativeElement);\n\n      this.checkPanelSize();\n    }\n  }\n\n  private checkPanelSize() {\n    if (this.direction === 'horizontal') {\n      const containerHeight = this.container.getBoundingClientRect().height;\n      const height = this.panel.nativeElement.getBoundingClientRect().height;\n      if (this.fullSize) {\n        this.panel.nativeElement.style.top = `${this.fullMargin || 0}px`;\n        this.panel.nativeElement.style.bottom = `${this.fullMargin || 0}px`;\n      } else {\n        this.panel.nativeElement.style.top = `${(containerHeight - height) / 2}px`;\n      }\n    } else {\n      const containerWidth = this.container.getBoundingClientRect().width;\n      const width = this.panel.nativeElement.getBoundingClientRect().width;\n      if (this.fullSize) {\n        this.panel.nativeElement.style.left = `${this.fullMargin || 0}px`;\n        this.panel.nativeElement.style.right = `${this.fullMargin || 0}px`;\n      } else {\n        this.panel.nativeElement.style.left = `${(containerWidth - width) / 2}px`;\n      }\n    }\n    this.drawUpdate()\n  }\n\n\n  private placeTo(position: 'top' | 'bottom' | 'left' | 'right') {\n    if (this.actualPosition === position) {\n      return;\n    }\n    if (this.animate) {\n      this.initAnimation(!this.sticky);\n    }\n    this.actualPosition = position;\n    this.drawUpdate();\n  }\n\n  private initAnimation(withClone: boolean) {\n    clearTimeout(this.animationTimeout);\n    if (this.animationState) {\n      this.animationState.targetTime = new Date().getTime() + (this.animate * this.animationState.animationState);\n      this.drawUpdate();\n      this.continueAnimation();\n    } else {\n      this.animationState = {\n        cloneElement: withClone ? this.panel.nativeElement.cloneNode(true) as HTMLElement : null,\n        animationState: 0,\n        targetTime: new Date().getTime() + this.animate,\n      };\n      if (this.animationState.cloneElement) {\n        this.panel.nativeElement.parentElement.appendChild(this.animationState.cloneElement);\n      }\n      this.continueAnimation();\n    }\n  }\n\n  private continueAnimation() {\n    clearTimeout(this.animationTimeout);\n    this.animationTimeout = setTimeout(() => {\n      this.drawUpdate();\n      if (this.animationState.animationState >= 1) {\n        this.stopAnimation();\n      } else {\n        this.continueAnimation();\n      }\n    }, 20);\n  }\n\n  private stopAnimation() {\n    clearTimeout(this.animationTimeout);\n    if (this.animationState?.cloneElement) {\n      this.animationState.cloneElement.remove();\n    }\n    this.animationState = null;\n    this.drawUpdate();\n  }\n\n\n  private drawUpdate() {\n    if (this.animationState) {\n      this.animationState.animationState = 1 - (this.animationState.targetTime - new Date().getTime()) / this.animate;\n    }\n\n    const animationStateSize = this.direction === 'horizontal' ? this.panel.nativeElement.getBoundingClientRect().width : this.panel.nativeElement.getBoundingClientRect().height;\n    const animationStateDistance = animationStateSize + this.margin;\n    const animationStateOffsetForClone = this.animationState ? this.animationState.animationState * animationStateDistance : animationStateDistance;\n    const animationStateOffsetForPanel = this.animationState ? (1 - this.animationState.animationState) * animationStateDistance : 0;\n\n    const draw = (selfKey: string, otherKey: string) => {\n      if (this.animationState?.cloneElement) {\n        this.animationState.cloneElement.style[selfKey] = '';\n        this.animationState.cloneElement.style[otherKey] = `${this.margin - animationStateOffsetForClone}px`;\n      }\n      if (this.sticky) {\n        if (this.stickyVisible) {\n          this.panel.nativeElement.style[otherKey] = '';\n          this.panel.nativeElement.style[selfKey] = `${this.margin - animationStateOffsetForPanel}px`;\n        } else {\n          this.panel.nativeElement.style[otherKey] = '';\n          this.panel.nativeElement.style[selfKey] = `${this.margin - animationStateOffsetForClone}px`;\n        }\n      } else {\n        this.panel.nativeElement.style[otherKey] = '';\n        this.panel.nativeElement.style[selfKey] = `${this.margin - animationStateOffsetForPanel}px`;\n      }\n    };\n\n    if (this.actualPosition === 'top') {\n      draw('top', 'bottom');\n    }\n    if (this.actualPosition === 'bottom') {\n      draw('bottom', 'top');\n    }\n    if (this.actualPosition === 'left') {\n      draw('left', 'right');\n    }\n    if (this.actualPosition === 'right') {\n      draw('right', 'left');\n    }\n  }\n\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {InfoPanelComponent} from './info-panel.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: [InfoPanelComponent],\n  exports: [InfoPanelComponent],\n})\nexport class InfoPanelModule {\n}\n","import {AfterViewInit, Component, ElementRef, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewChild} from '@angular/core';\n\nconst barWidth = 6;\n\n@Component({\n  selector: 'split-bar',\n  template: `\n    <div class=\"split-bar\" #bar\n         (mouseenter)=\"mouseEnter()\"\n         (mouseleave)=\"mouseLeave()\"\n    ></div>`,\n  styles: [\n    `.split-bar {\n      width: ${barWidth}px;\n      background: linear-gradient(90deg, rgb(200, 200, 200) 0%, rgb(255, 255, 255) 35%, rgb(200, 200, 200) 100%);\n      cursor: col-resize;\n    }`,\n  ],\n})\nexport class SplitBarComponent implements OnInit, OnChanges, AfterViewInit {\n\n  @Input()\n  public container: HTMLElement;\n\n  @ViewChild('bar')\n  public bar: ElementRef<HTMLElement>;\n\n  @Input()\n  public positionLeft: number;\n\n  @Input()\n  public positionRight: number;\n\n  @Input()\n  public outsideIntervalTime: number = 200;\n\n  @Input()\n  public stickVisibility: boolean = false;\n\n\n  @Output()\n  public newPosition = new EventEmitter<{ left: number, right: number }>();\n\n  @Output()\n  public outsideRight = new EventEmitter<void>();\n\n  @Output()\n  public outsideLeft = new EventEmitter<void>();\n\n  @Output()\n  public exitRight = new EventEmitter<void>();\n\n  @Output()\n  public exitLeft = new EventEmitter<void>();\n\n  @Output()\n  public moveEnd = new EventEmitter<void>();\n\n\n  constructor() {\n  }\n\n  public ngOnInit(): void {\n  }\n\n  public ngAfterViewInit() {\n    this.initContainer();\n    this.initBarDrag();\n  }\n\n  public ngOnChanges(changes: SimpleChanges) {\n    if (changes.container) {\n      this.initContainer();\n    }\n    if (changes.positionLeft || changes.positionRight) {\n      this.checkPosition();\n    }\n  }\n\n  private initContainer() {\n    if (this.container && this.bar?.nativeElement) {\n      if (!['relative', 'absolute', 'fixed'].includes(this.container.style.position)) {\n        this.container.style.position = 'relative';\n      }\n\n      this.bar.nativeElement.style.position = 'absolute';\n      this.bar.nativeElement.style.pointerEvents = 'initial';\n      this.bar.nativeElement.style.top = '0';\n      this.bar.nativeElement.style.bottom = '0';\n\n      this.bar.nativeElement.style.opacity = this.stickVisibility ? '1' : '0';\n      this.checkPosition();\n    }\n  }\n\n  private checkPosition() {\n    if (this.container && this.bar?.nativeElement) {\n      this.bar.nativeElement.style.left = '';\n      this.bar.nativeElement.style.right = '';\n      this.bar.nativeElement.style.display = 'none';\n      if (typeof this.positionLeft === 'number') {\n        this.bar.nativeElement.style.left = (this.positionLeft - barWidth / 3) + 'px';\n        this.bar.nativeElement.style.display = '';\n      }\n      if (typeof this.positionRight === 'number') {\n        this.bar.nativeElement.style.right = (this.positionRight - barWidth / 3) + 'px';\n        this.bar.nativeElement.style.display = '';\n      }\n    }\n  }\n\n  public mouseEnter() {\n    this.bar.nativeElement.style.opacity = this.stickVisibility ? '1' : '1';\n  }\n\n  public mouseLeave() {\n    this.bar.nativeElement.style.opacity = this.stickVisibility ? '1' : '0';\n  }\n\n  private initBarDrag() {\n    const bar = this.bar.nativeElement;\n    const container = this.container;\n\n    let startPosition: [number, number];\n    let position: number;\n\n    let outsideRightInterval: any;\n    let outsideLeftInterval: any;\n\n    bar.draggable = true;\n    bar.ondragstart = (event) => {\n      startPosition = [event.clientX, event.clientY];\n\n      if (typeof this.positionLeft === 'number') {\n        position = this.positionLeft;\n      }\n      if (typeof this.positionRight === 'number') {\n        position = container.getBoundingClientRect().width - this.positionRight;\n      }\n\n      const crt = bar.cloneNode(false) as HTMLElement;\n      crt.style.display = 'none';\n      event.dataTransfer.setDragImage(crt, 0, 0);\n    };\n    bar.ondrag = (event) => {\n      if (typeof position !== 'number') {\n        return;\n      }\n      const actualPosition = [event.clientX, event.clientY];\n      if (event.clientX && event.clientY) {\n        const dragOffset = actualPosition[0] - startPosition[0];\n        const containerWidth = container.getBoundingClientRect().width;\n        const right = (containerWidth - position) - dragOffset;\n        const left = position + dragOffset;\n\n        if (right >= 0 && left >= 0) {\n          this.newPosition.emit({left, right});\n        }\n\n        if (left > 0) {\n          if (!outsideRightInterval) {\n            this.exitRight.emit();\n            outsideRightInterval = setInterval(() => this.outsideRight.emit(), this.outsideIntervalTime);\n          }\n        } else {\n          clearInterval(outsideRightInterval);\n          outsideRightInterval = null;\n        }\n        if (left < 0) {\n          if (!outsideLeftInterval) {\n            this.exitLeft.emit();\n            outsideLeftInterval = setInterval(() => this.outsideLeft.emit(), this.outsideIntervalTime);\n          }\n        } else {\n          clearInterval(outsideLeftInterval);\n          outsideLeftInterval = null;\n        }\n      }\n    };\n    bar.ondragend = (event) => {\n      clearInterval(outsideRightInterval);\n      clearInterval(outsideLeftInterval);\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      this.checkPosition();\n      this.moveEnd.emit();\n    };\n  }\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {SplitBarComponent} from './split-bar.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: [SplitBarComponent],\n  exports: [SplitBarComponent],\n})\nexport class SplitBarModule {\n}\n","import {Component, OnChanges, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'bar-and-panel-showcase',\n  templateUrl: './bar-and-panel-showcase.component.html',\n})\nexport class BarAndPanelShowcaseComponent implements OnInit {\n\n  public width = 120;\n  public left = 20;\n  public textOutside: string;\n\n  public stickyPanelVisible = true;\n\n  constructor() {\n  }\n\n  public ngOnInit(): void {\n  }\n\n  public onDragRight(newPosition: { left: number, right: number }) {\n    const newWidth = newPosition.left - this.left;\n    if (newWidth > 10 && (newWidth + this.left) < 490) {\n      this.width = newWidth;\n    }\n    this.textOutside = null;\n  }\n\n  public onDragLeft(newPosition: { left: number, right: number }) {\n    const newLeft = newPosition.left;\n    if (newLeft > 10 && (newLeft + this.width) < 490) {\n      this.left = newLeft;\n    }\n    this.textOutside = null;\n  }\n\n  public onOutsideRight() {\n    if (this.left < 480) {\n      this.left += 10;\n      this.width -= 10;\n    }\n  }\n\n  public onOutsideLeft() {\n    if (this.width > 20) {\n      this.width -= 10;\n    }\n  }\n\n  public onExitRight() {\n    this.textOutside = '(outside right)';\n  }\n\n  public onExitLeft() {\n    this.textOutside = '(outside left)';\n  }\n\n  public onMoveEnd() {\n    this.textOutside = null;\n  }\n\n  public hideSticky($event: MouseEvent) {\n    $event.stopImmediatePropagation();\n    this.stickyPanelVisible = false;\n  }\n\n  public showSticky($event: MouseEvent) {\n    this.stickyPanelVisible = true;\n  }\n\n}\n","<h1>Split Bar</h1>\n\n<h2>Vertical</h2>\n\n<div #vertical\n     style=\"margin-top: 20px; display: block; margin-left: 50px; width: 500px; height: 100px; background: #e1e1e1; position: relative\">\n\n  <div style=\"position: absolute; display: block; top: 30px; height: 50px; background: #ced4da\"\n       [ngStyle]=\"{left: left+'px', width: width+'px'}\"></div>\n\n  <split-bar\n    [container]=\"vertical\" [positionLeft]=\"left + width\"\n    [outsideIntervalTime]=\"250\"\n    (newPosition)=\"onDragRight($event)\"\n    (outsideRight)=\"onOutsideRight()\"\n    (exitRight)=\"onExitRight()\"\n    (moveEnd)=\"onMoveEnd()\"\n  ></split-bar>\n\n  <split-bar\n    [container]=\"vertical\" [positionLeft]=\"left\"\n    [outsideIntervalTime]=\"250\"\n    (newPosition)=\"onDragLeft($event)\"\n    (outsideLeft)=\"onOutsideLeft()\"\n    (exitLeft)=\"onExitLeft()\"\n    (moveEnd)=\"onMoveEnd()\"\n  ></split-bar>\n\n  <div>\n    left: {{left}} width: {{width}} {{textOutside}}\n  </div>\n\n</div>\n\n\n<div #infoPanelContainer1\n     style=\"margin: 20px; display: block; margin-left: 50px; width: calc( 100vw - 100px ); height: 400px; background: #e1e1e1; position: relative\">\n\n  <info-panel [container]=\"infoPanelContainer1\" [margin]=\"0\">\n    <div class=\"displayFlex contentCenter\"\n      style=\"width: 300px; height: 100px;  background: #ced4da\">\n      Here is the info content\n    </div>\n  </info-panel>\n\n  <div>\n    Info Panel\n  </div>\n\n</div>\n\n\n<div #infoPanelContainer2\n     style=\"margin: 20px; display: block; margin-left: 50px; width: calc( 100vw - 100px ); height: 400px; background: #e1e1e1; position: relative\">\n\n  <info-panel [container]=\"infoPanelContainer2\" [margin]=\"20\" [animate]=\"1000\" [anchor]=\"'bottom'\">\n    <div class=\"displayFlex contentCenter\"\n      style=\"width: 300px; height: 100px; background: #ced4da\">\n      This content likes to be at the bottom\n    </div>\n  </info-panel>\n\n  <info-panel [container]=\"infoPanelContainer2\" [margin]=\"0\" [animate]=\"500\" [direction]=\"'horizontal'\">\n    <div class=\"displayFlex contentCenter\"\n      style=\"width: 100px; height: 200px; background: #ced4da\">\n      left and right\n    </div>\n  </info-panel>\n\n  <div>\n    Info Panel with aninmation\n  </div>\n\n</div>\n\n\n<div #infoPanelContainer3\n     style=\"margin: 20px; display: block; margin-left: 50px; width: calc( 100vw - 100px ); height: 400px; background: #e1e1e1; position: relative\"\n     (click)=\"showSticky($event)\">\n\n  <info-panel [container]=\"infoPanelContainer3\" [margin]=\"20\" [animate]=\"500\" [direction]=\"'horizontal'\" [sticky]=\"true\"\n              [stickyVisible]=\"stickyPanelVisible\">\n    <div\n      (click)=\"hideSticky($event)\" class=\"displayFlex contentCenter\"\n      style=\"width: 85px; height: 200px; padding: 10px; background: #ced4da\">\n      this is sticky, click to hide\n    </div>\n  </info-panel>\n\n  <div>\n    Info Panel that is sticky\n  </div>\n\n</div>\n\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {InfoPanelModule} from '../info-panel/info-panel.module';\nimport {SplitBarModule} from '../split-bar/split-bar.module';\nimport {BarAndPanelShowcaseComponent} from './bar-and-panel-showcase.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n\n    SplitBarModule,\n    InfoPanelModule,\n  ],\n  declarations: [BarAndPanelShowcaseComponent],\n  exports: [BarAndPanelShowcaseComponent],\n})\nexport class BarAndPanelShowcaseModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i2.SplitBarComponent","i3.InfoPanelComponent"],"mappings":"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"}